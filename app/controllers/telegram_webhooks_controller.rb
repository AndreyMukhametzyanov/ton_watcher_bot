# frozen_string_literal: true

class TelegramWebhooksController < Telegram::Bot::UpdatesController
  before_action :find_user

  include Telegram::Bot::UpdatesController::MessageContext
  extend Telegram::Bot::ConfigMethods

  use_session!

  def self.send_message(text:, to:)
    new(bot, { from: { 'id' => to }, chat: { 'id' => to } }).process(:send_message, text)
  end

  def send_message(text)
    respond_with :message, text: text
  end

  def start!(*)
    return if from['is_bot']

    if @current_user
      respond_with :message, text: '–ü—Ä–∏–≤–µ—Ç!'
      instructions
    else
      respond_with :message, text: '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å Ton –∫–æ—à–µ–ª—å–∫–∞'
      save_context :add_ton_address
    end
  end

  def add_ton_address(address = nil, *)
    create_user!(address)
    respond_with :message, text: '–ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!'
    instructions
  end

  def instructions(*)
    respond_with :message, text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup: {
      inline_keyboard: [
        [
          { text: '–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'get_result' },
          { text: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏', callback_data: 'check' },
          { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏', callback_data: 'settings' }
        ]
      ]
    }
  end

  def set_settings(*)
    respond_with :message, text: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏', reply_markup: {
      inline_keyboard: [
        [
          { text: '–†–∞–∑ –≤ –¥–µ–Ω—å', callback_data: 'per_day' },
          { text: '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: 'per_week' },
          { text: '–†–∞–∑ –≤ –º–µ—Å—è—Ü', callback_data: 'per_month' },
          { text: '–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'stop_send' }
        ]
      ]
    }
  end

  def callback_query(data)
    case data
    when 'get_result'
      respond_with :message, text: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞—Å—å –º–∞–≥–∏—è üßô‚Äç‚ôÇü™Ñ'
      respond_with :message, text: PrettyPrintResults.print_result(WhalesPoolDataFetcher.html_into_massive(@current_user.ton_address))
    when 'check'
      MyWorker.perform
    when 'settings'
      set_settings
    when 'per_day'
      respond_with :message, text: '–í—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 14-00 üïë'
      @current_user.update(send_period: '*/5 * * * *')
    when 'per_week'
      respond_with :message, text: '–í—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ –ø–Ω –≤ 14-00 üïë'
      @current_user.update(send_period: '0 14 * * mon')
    when 'per_month'
      respond_with :message, text: '–í—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –≤ 14-00 üïë'
      @current_user.update(send_period: '0 14 1 * *')
    when 'stop_send'
      respond_with :message, text: '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå'
      @current_user.update(send_period: '')
    else
      respond_with :message, text: '–ö—É–¥–∞ –ø–æ–ª–µ–∑??'
    end
  end

  private

  def session_key
    "#{bot.username}:#{chat['id']}:#{from['id']}" if chat && from
  end

  def find_user
    @current_user = User.find_by(external_id: from['id'])
  end

  def create_user!(address)
    User.create!(
      external_id: from['id'],
      first_name: from['first_name'],
      last_name: from['last_name'],
      username: from['username'],
      language_code: from['language_code'],
      ton_address: address
    )
  end
end
